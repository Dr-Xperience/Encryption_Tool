head	1.10;
access;
symbols;
locks
	Dr.Xperience:1.10; strict;
comment	@# @;


1.10
date	2012.11.22.09.12.42;	author Dr.Xperience;	state Exp;
branches;
next	1.9;

1.9
date	2012.11.19.07.51.12;	author Dr.Xperience;	state Exp;
branches;
next	1.8;

1.8
date	2012.11.16.17.29.54;	author Dr.Xperience;	state Exp;
branches;
next	1.7;

1.7
date	2012.11.16.17.18.36;	author Dr.Xperience;	state Exp;
branches;
next	1.6;

1.6
date	2012.11.16.17.13.49;	author Dr.Xperience;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.16.16.40.26;	author Dr.Xperience;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.16.16.27.42;	author Dr.Xperience;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.16.16.27.06;	author Dr.Xperience;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.16.16.24.31;	author Dr.Xperience;	state Exp;
branches;
next	1.1;

1.1
date	2012.11.16.16.07.38;	author Dr.Xperience;	state Exp;
branches;
next	;


desc
@@


1.10
log
@*** empty log message ***
@
text
@/** *********************************************************************************
 * TITLE        : THE CLASS TO ENCRYPT AND DECRYPT THE FILE AND TO CREATE ENCRYPTION AND DECRYPTION KEY
 * AUTHOR       : RK10R04A01;11000527;ANUBHAV ARUN GUPTA
 * DATE/TIME    : AD 2012.11.16.20.59
 * EDITOR       : VIM
 * JAVA VERSION : 1.6.0_22
 * JRE          : OpenJDK Runtime Environment (IcedTea6 1.10.3) (fedora-59.1.10.3.fc16-x86_64)
 * VERSION      : $Id: Encrypt.java,v 1.10 2012/11/22 07:41:14 Dr.Xperience Exp Dr.Xperience $
 * *********************************************************************************** */
import java.io.*;
//import java.io.File;
//import java.io.FileInputStream;
//import java.io.FileNotFoundException;
//import java.io.FileOutputStream;
//import java.io.IOException;
//import java.io.ObjectInputStream;
//import java.io.ObjectOutputStream;
//import java.security.KeyPair;
//import java.security.KeyPairGenerator;
//import java.security.NoSuchAlgorithmException;
//import java.security.PrivateKey;
//import java.security.PublicKey;

import java.security.*;
import javax.crypto.Cipher;

public class Encrypt
{
  FileInputStream vInFile;
  FileOutputStream vOutFile;


 /**
  * String to hold name of the encryption algorithm.
  */
  public static final String ALGORITHM = "RSA";

  /**
   * String to hold the name of the private key file.
   */

  public static final String PRIVATE_KEY_FILE = "private.key";

  /**
   * String to hold name of the public key file.
   */
  public static final String PUBLIC_KEY_FILE = "public.key";

  /**
  * Generate key which contains a pair of private and public key using 1024
  * bytes. Store the set of keys in Prvate.key and Public.key files.
  * 
  * @@throws NoSuchAlgorithmException
  * @@throws IOException
  * @@throws FileNotFoundException
  */
  public void generateKey ()
  {
    try
    {
      if (areKeysPresent (3))
	{
	  //throw new Exception ("Keys Not Present");
	  return;
}
      final KeyPairGenerator vKeyGen =
	KeyPairGenerator.getInstance (ALGORITHM);
        vKeyGen.initialize (1024);
      final KeyPair vKeyPair = vKeyGen.generateKeyPair ();

      File vPrivateKeyFile = new File (PRIVATE_KEY_FILE);
      File vPublicKeyFile = new File (PUBLIC_KEY_FILE);

        vPrivateKeyFile.createNewFile ();

        vPublicKeyFile.createNewFile ();

      ObjectOutputStream vPublicKeyOS =
	new ObjectOutputStream (new FileOutputStream (vPublicKeyFile));
        vPublicKeyOS.writeObject (vKeyPair.getPublic ());
        vPublicKeyOS.close ();

      ObjectOutputStream vPrivateKeyOS =
	new ObjectOutputStream (new FileOutputStream (vPrivateKeyFile));
        vPrivateKeyOS.writeObject (vKeyPair.getPrivate ());
        vPrivateKeyOS.close ();
    } catch (Exception e)
    {
      e.printStackTrace ();
    }

  }

  /**
 *    * The method checks if the pair of public and private key has been generated.
 *       * 
 *          * @@return flag indicating if the pair of keys were generated.
 *             */
  public boolean areKeysPresent (int i)
  {
if( i ==0 )
{
    File vPrivateKey = new File (PRIVATE_KEY_FILE);
    if (vPrivateKey.exists () )
      {
	return true;
      }
    return false;
}
else if( i==1)
{
    File vPublicKey = new File (PUBLIC_KEY_FILE);

    if (vPublicKey.exists ())
      {
	return true;
      }
    return false;
}
else
{
    File vPrivateKey = new File (PRIVATE_KEY_FILE);
    File vPublicKey = new File (PUBLIC_KEY_FILE);

    if (vPublicKey.exists ()&&vPrivateKey.exists())
      {
	return true;
      }
    return false;


}

}
  public void encrypt (File inFile, File outFile)
  {
    try
    {
      if (!areKeysPresent (1))
	{
	  throw new Exception ("Keys Not Present");
	}
      ObjectInputStream vInputStream =
	new ObjectInputStream (new FileInputStream (PUBLIC_KEY_FILE));

      final PublicKey vPublicKey = (PublicKey) vInputStream.readObject ();

      vInputStream.close ();
      final Cipher vCipher = Cipher.getInstance (ALGORITHM);
      vCipher.init (Cipher.ENCRYPT_MODE, vPublicKey);

      vInFile = new FileInputStream (inFile);
      vOutFile = new FileOutputStream (outFile);

      byte[] vInput = new byte[100];
      int bytesRead;
      while ((bytesRead = vInFile.read (vInput,0,100)) != -1)
	{
	  byte[] vOutput = vCipher.doFinal (vInput, 0, bytesRead);
	  if (vOutput != null)
	    vOutFile.write (vOutput);
	}
      vInFile.read(vInput);
      byte[] vOutput = vCipher.doFinal (vInput);
      if (vOutput != null)
	vOutFile.write (vOutput);

      vInFile.close ();
      vOutFile.flush ();
      vOutFile.close ();
    }
    catch (Exception e)
    {
      e.printStackTrace ();
    }
  }


  public void decrypt (File inFile, File outFile)
  {
    try
    {
      if (!areKeysPresent (0))
	{
	  throw new  Exception ("Keys Not Present");
	}
      ObjectInputStream vInputStream =
	new ObjectInputStream (new FileInputStream (PRIVATE_KEY_FILE));

      final PrivateKey vPrivateKey = (PrivateKey) vInputStream.readObject ();

      vInputStream.close ();
      // get an RSA cipher object and print the provider
      final Cipher vCipher = Cipher.getInstance (ALGORITHM);
      // encrypt the plain text using the public key
      vCipher.init (Cipher.DECRYPT_MODE, vPrivateKey);

      vInFile = new FileInputStream (inFile);
      vOutFile = new FileOutputStream (outFile);

      byte vInput[] = new byte[128];
      int bytesRead;
      while ((bytesRead = vInFile.read(vInput,0,128)) != -1)
	{
	  byte vOutput[] = vCipher.doFinal(vInput, 0, 128);
	  if (vOutput != null)
	    vOutFile.write (vOutput);
	}

      byte vOutput[] = vCipher.doFinal (vInput);
      if (vOutput != null)
	vOutFile.write (vOutput);

      vInFile.close ();
      vOutFile.flush ();
      vOutFile.close ();
    }
    catch (Exception e)
    {
      e.printStackTrace ();
    }
  }
}
@


1.9
log
@*** empty log message ***
@
text
@d8 1
a8 1
 * VERSION      : $Id: Encrypt.java,v 1.8 2012/11/16 17:29:54 Dr.Xperience Exp Dr.Xperience $
d61 1
a61 1
      if (areKeysPresent ())
d99 1
a99 1
  public boolean areKeysPresent ()
d101 12
d114 8
d125 1
a125 1
    if (vPrivateKey.exists () && vPublicKey.exists ())
a129 1
  }
d131 4
d139 1
a139 1
      if (!areKeysPresent ())
d153 1
a153 1
      vOutFile = new FileOutputStream (outFile + ",eny");
d183 1
a183 1
      if (!areKeysPresent ())
@


1.8
log
@*** empty log message ***
@
text
@d8 1
a8 1
 * VERSION      : $Id: Encrypt.java,v 1.7 2012/11/16 17:18:36 Dr.Xperience Exp $
d132 1
a132 1
      byte[] vInput = new byte[8];
d134 1
a134 1
      while ((bytesRead = vInFile.read (vInput)) != -1)
d136 1
a136 1
	  byte[] vOutput = vCipher.update (vInput, 0, bytesRead);
d140 2
a141 2

      byte[] vOutput = vCipher.doFinal ();
d178 1
a178 1
      byte vInput[] = new byte[8];
d180 1
a180 1
      while ((bytesRead = vInFile.read(vInput)) != -1)
d182 1
a182 1
	  byte vOutput[] = vCipher.update(vInput, 0, bytesRead);
d187 1
a187 1
      byte vOutput[] = vCipher.doFinal ();
@


1.7
log
@*** empty log message ***
@
text
@d8 1
a8 1
 * VERSION      : $Id: Encrypt.java,v 1.6 2012/11/16 17:13:49 Dr.Xperience Exp Dr.Xperience $
d132 1
a132 1
      byte[] vInput = new byte[64];
d178 1
a178 1
      byte vInput[] = new byte[64];
@


1.6
log
@*** empty log message ***
@
text
@d8 1
a8 1
 * VERSION      : $Id: Encrypt.java,v 1.5 2012/11/16 16:40:26 Dr.Xperience Exp Dr.Xperience $
d18 5
a22 5
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
d24 1
@


1.5
log
@*** empty log message ***
@
text
@d8 1
a8 1
 * VERSION      : $Id: Encrypt.java,v 1.4 2012/11/16 16:27:42 Dr.Xperience Exp Dr.Xperience $
d60 5
@


1.4
log
@*** empty log message ***
@
text
@d8 1
a8 1
 * VERSION      : $Id: Encrypt.java,v 1.3 2012/11/16 16:27:06 Dr.Xperience Exp Dr.Xperience $
d11 7
a17 7
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
d63 1
a63 1
      final KeyPair vKeyPair = keyGen.generateKeyPair ();
d112 1
a112 1
	  throw Exception ("Keys Not Present");
d123 1
a123 1
      vInFile = new FileInputStream (inFIle);
d126 1
a126 1
      byte[]vInput = new byte[64];
d128 1
a128 1
      while ((bytesRead = inFile.read (vInput)) != -1)
d130 3
a132 3
	  byte[]vOutput = vCipher.update (vInput, 0, bytesRead);
	  if (output != null)
	    outFile.write (vOutput);
d135 7
a141 7
      byte[]vOutput = vCipher.doFinal ();
      if (output != null)
	outFile.write (vOutput);

      inFile.close ();
      outFile.flush ();
      outFile.close ();
d156 1
a156 1
	  throw Exception ("Keys Not Present");
d169 1
a169 1
      vInFile = new FileInputStream (inFIle);
d172 1
a172 1
      byte[]vInput = new byte[64];
d174 1
a174 1
      while ((bytesRead = inFile.read (vInput)) != -1)
d176 3
a178 3
	  byte[]vOutput = vCipher.update (vInput, 0, bytesRead);
	  if (output != null)
	    outFile.write (vOutput);
d181 7
a187 7
      byte[]vOutput = vCipher.doFinal ();
      if (output != null)
	outFile.write (vOutput);

      inFile.close ();
      outFile.flush ();
      outFile.close ();
@


1.3
log
@*** empty log message ***
@
text
@d8 1
a8 1
 * VERSION      : $Id: Encrypt.java,v 1.2 2012/11/16 16:24:31 Dr.Xperience Exp Dr.Xperience $
d194 1
@


1.2
log
@*** empty log message ***
@
text
@d8 1
a8 1
 * VERSION      : $Id: Encrypt.java,v 1.1 2012/11/16 16:07:38 Dr.Xperience Exp Dr.Xperience $
d26 1
a26 1
class Encrypt
d56 1
a56 1
  public static void generateKey ()
d93 1
a93 1
  public static boolean areKeysPresent ()
d106 1
a106 1
  public static void encrypt (File inFile, File outFile)
a147 1
}
d149 2
a150 4
public static void
decrypt (File inFile, File outFile)
{
  try
d152 19
a170 6
    if (!areKeysPresent ())
      {
	throw Exception ("Keys Not Present");
      }
    ObjectInputStream vInputStream =
      new ObjectInputStream (new FileInputStream (PRIVATE_KEY_FILE));
d172 8
a179 1
    final PrivateKey vPrivateKey = (PrivateKey) vInputStream.readObject ();
d181 3
a183 17
    vInputStream.close ();
    // get an RSA cipher object and print the provider
    final Cipher vCipher = Cipher.getInstance (ALGORITHM);
    // encrypt the plain text using the public key
    vCipher.init (Cipher.DECRYPT_MODE, vPrivateKey);

    vInFile = new FileInputStream (inFIle);
    vOutFile = new FileOutputStream (outFile);

    byte[]vInput = new byte[64];
    int bytesRead;
    while ((bytesRead = inFile.read (vInput)) != -1)
      {
	byte[]vOutput = vCipher.update (vInput, 0, bytesRead);
	if (output != null)
	  outFile.write (vOutput);
      }
d185 8
a192 11
    byte[]vOutput = vCipher.doFinal ();
    if (output != null)
      outFile.write (vOutput);

    inFile.close ();
    outFile.flush ();
    outFile.close ();
  }
  catch (Exception e)
  {
    e.printStackTrace ();
a193 1
}
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
 * VERSION      : $Id$
d30 1
a30 1
    byte[] vInput = new byte[64];
d106 1
a106 1
  public static byte[] encrypt (File inFile, File outFile)
a107 1
    byte[]cipherText = null;
d110 4
d116 1
d119 1
a119 1
      // get an RSA cipher object and print the provider
d121 2
a122 2
      // encrypt the plain text using the public key
      vCipher.init (Cipher.ENCRYPT_MODE, publicKey);
d124 69
a192 1
    vOutFile = new FileOutputStream}
@
